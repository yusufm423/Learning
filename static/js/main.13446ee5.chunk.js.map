{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","placeholder","onClick","toggleMode","htmlFor","TextForm","useState","text","setText","style","color","heading","value","onChange","event","console","log","target","backgroundColor","rows","newText","toUpperCase","showAlert","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","split","join","length","defaultProps","aboutText","Alert","alert","role","word","lower","charAt","slice","capitalize","msg","App","setMode","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.13446ee5.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom'\r\n\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n  <div className=\"container-fluid\">\r\n    <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li className=\"nav-item\">\r\n          <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n        </li>\r\n        {/* <li className=\"nav-item\">\r\n          <a className=\"nav-link\" href=\"#\">{props.aboutText}</a>\r\n        </li> */}\r\n      </ul>\r\n      <form className=\"d-flex\">\r\n        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n        <button className=\"btn btn-warning\" type=\"submit\">Search</button>\r\n      </form>\r\n\r\n      <div className={`form-check form-switch text-${props.mode === 'light'?'dark':'light'}`}>\r\n        <input className=\"form-check-input mx-2\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Dark mode</label>\r\n      </div>\r\n\r\n    </div>\r\n    </div>\r\n  </nav>\r\n    )\r\n}\r\n\r\n//A check for string or objects\r\nNavbar.propTypes = {title: PropTypes.string.isRequired,\r\n                    aboutText: PropTypes.string}\r\n\r\n//default\r\nNavbar.defaultProps ={\r\n    title: \"Set title here\",\r\n    aboutText: \"Set about here\"\r\n}","import React, {useState} from 'react'\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpClick = ()=>{\r\n        console.log(\"Uppercase was clicked\")\r\n        let newText = text.toUpperCase();\r\n        setText(newText)\r\n        props.showAlert(\"Converted to Uppercase\",\"success\");\r\n    }\r\n    const handleLowClick = ()=>{\r\n        console.log(\"Lowercase was clicked\")\r\n        let newText = text.toLowerCase();\r\n        setText(newText)\r\n        props.showAlert(\"Converted to Lowercase\",\"success\")\r\n    }\r\n    const handleClearClick = ()=>{\r\n        console.log(\"Text Cleared\")\r\n        let newText = '';\r\n        setText(newText)\r\n        props.showAlert(\"Cleared\",\"success\")\r\n    }\r\n    const handleOnChange = (event)=>{\r\n        console.log(\"on change\")\r\n        setText(event.target.value)\r\n    }\r\n    const handleCopy=()=>{\r\n        console.log(\"Copy initiated\");\r\n        var text = document.getElementById(\"mybox\");\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value)\r\n        props.showAlert(\"Copied\",\"success\")\r\n    }\r\n    const handleExtraSpaces=()=>{\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"));\r\n    }\r\n    //hooks\r\n    const [text, setText] = useState('Enter text here');\r\n    //text=\"Hello\"//wrong way\r\n    //setText(\"Hello\")//Right way\r\n    return (\r\n        <>\r\n        <div className=\"container\" style={{color : props.mode === 'light'?'black':'white'}}>\r\n            <h1>\r\n                {props.heading} \r\n            </h1>\r\n            <div className=\"mb-3\">\r\n                <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={{backgroundColor : props.mode === 'light'?'white':'grey',color : props.mode === 'light'?'black':'white'}} id=\"mybox\" rows=\"8\"></textarea>\r\n                {/* //onchange isliye taaki ham type kr skein */}\r\n            </div>\r\n            <button className=\"btn btn-primary mx-2\" onClick={handleUpClick}>Convert to uppercase</button>\r\n            <button className=\"btn btn-primary mx-2\" onClick={handleLowClick}>Convert to lowercase</button>\r\n            <button className=\"btn btn-primary mx-2\" onClick={handleClearClick}>Clear Text</button>\r\n            <button className=\"btn btn-primary mx-2\" onClick={handleCopy}>Copy</button>\r\n            <button className=\"btn btn-primary mx-2\" onClick={handleExtraSpaces}>Remove Extra Space</button>\r\n\r\n        </div>\r\n        <div className=\"container my-3\" style={{color : props.mode === 'light'?'black':'white'}}>\r\n            <h2>Your text summary</h2>\r\n            <p>number of words={text.split(\" \").length} and number of characters= {text.length}</p>\r\n            <p>{0.008 * text.split(\" \").length} minutes to read</p>\r\n            <h2>Preview</h2>\r\n            <p>{text.length>0?text:\"Enter some text above to preview it here\"}</p>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n\r\n    const capitalize=(word)=>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return (\r\n        props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n            {/* <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\">\r\n            </button> */}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n","//import logo from './logo.svg';\nimport './App.css';\nimport Navbar from './components/Navbar';\n// import About from './components/About';\nimport TextForm from './components/TextForm';\nimport React, { useState } from 'react'\nimport Alert from './components/Alert';\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route\n// } from \"react-router-dom\";\n\n\nfunction App() {\n\n  const [mode, setMode] = useState('light');\n  const [alert, setAlert] = useState(null);\n\n  const showAlert=(message,type)=>{\n    setAlert({\n      msg: message,\n      type: type\n    })\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  }\n\n  const toggleMode=()=>{\n    if(mode=== 'light'){\n      setMode('dark');\n      document.body.style.backgroundColor= '#021e48';\n      showAlert(\"Dark Mode enabled\",\"success\")\n\n    }else{\n      setMode('light');\n      document.body.style.backgroundColor= 'white';\n      showAlert(\"Light Mode enabled\",\"success\")\n    }\n  }\n  return (\n    <>\n      {/* <Router> */}\n      <Navbar title=\"Yusuf Don\" aboutText=\"About Us\" mode={mode} toggleMode={toggleMode}/>\n      <Alert alert={alert} />\n      {/* <Navbar />*/}\n      <div className=\"container my-3\">\n      {/* <Switch>\n          <Route exact path=\"/about\">\n            <About />\n          </Route> */}\n          {/* <Route exact path=\"/\"> */}\n          <TextForm showAlert={showAlert} heading=\"Enter the text to analyse\" mode={mode} />\n          {/* </Route>\n        </Switch> */}\n        {/* <About /> */}\n      </div>\n      {/* </Router> */}\n    </>\n    )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}